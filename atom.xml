<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老根&#39;s Blog</title>
  
  <subtitle>Stay hungry, Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://maslow.github.io/"/>
  <updated>2018-12-10T13:41:42.214Z</updated>
  <id>http://maslow.github.io/</id>
  
  <author>
    <name>Maslow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js 源码分析 - 原生模块的注册</title>
    <link href="http://maslow.github.io/nodejs/nodejs-src/register-builtin-modules/"/>
    <id>http://maslow.github.io/nodejs/nodejs-src/register-builtin-modules/</id>
    <published>2018-11-28T13:04:49.000Z</published>
    <updated>2018-12-10T13:41:42.214Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇提到 <code>RegisterBuiltinModules()</code> 注册了原生 C++ 模块没有详细展开，这里就从这个函数展开。</p><a id="more"></a><h3 id="将-RegisterBuiltinModules-层层展开"><a href="#将-RegisterBuiltinModules-层层展开" class="headerlink" title="将 RegisterBuiltinModules() 层层展开"></a>将 RegisterBuiltinModules() 层层展开</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node.cc:3066 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RegisterBuiltinModules</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(modname) _register_##modname();</span></span><br><span class="line">  NODE_BUILTIN_MODULES(V)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> V</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义了一个宏 <code>V</code> 为 <code>_register_##modname()</code>, 可以看出 <code>V</code> 展开后是一个函数调用类似这样: <code>_register_xx()</code>;</p><p>随后，<code>RegisterBuiltinModules()</code> 实际是宏 <code>NODE_BUILTIN_MODULES(V)</code> 来实现的，我们看看它的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node_internals.h:147 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_BUILTIN_MODULES(V)    \</span></span><br><span class="line">  NODE_BUILTIN_STANDARD_MODULES(V)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>进一步查看 <code>NODE_BUILTIN_STANDARD_MODULES(V)</code> 的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node_internals.h:106 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_BUILTIN_STANDARD_MODULES(V)  \</span></span><br><span class="line">    V(async_wrap)       \</span><br><span class="line">    V(buffer)           \</span><br><span class="line">    V(cares_wrap)       \</span><br><span class="line">    V(config)           \</span><br><span class="line">    V(contextify)       \</span><br><span class="line">    V(domain)           \</span><br><span class="line">    V(fs)               \</span><br><span class="line">    V(fs_event_wrap)    \</span><br><span class="line">    V(heap_utils)       \</span><br><span class="line">    V(http2)            \</span><br><span class="line">    V(http_parser)      \</span><br><span class="line">    V(inspector)        \</span><br><span class="line">    V(js_stream)        \</span><br><span class="line">    V(messaging)        \</span><br><span class="line">    V(module_wrap)      \</span><br><span class="line">    V(options)          \</span><br><span class="line">    V(os)               \</span><br><span class="line">    V(performance)      \</span><br><span class="line">    V(pipe_wrap)        \</span><br><span class="line">    V(process_wrap)     \</span><br><span class="line">    V(serdes)           \</span><br><span class="line">    V(signal_wrap)      \</span><br><span class="line">    V(spawn_sync)       \</span><br><span class="line">    V(stream_pipe)      \</span><br><span class="line">    V(stream_wrap)      \</span><br><span class="line">    V(string_decoder)   \</span><br><span class="line">    V(symbols)          \</span><br><span class="line">    V(tcp_wrap)         \</span><br><span class="line">    V(timer_wrap)       \</span><br><span class="line">    V(trace_events)     \</span><br><span class="line">    V(tty_wrap)         \</span><br><span class="line">    V(types)            \</span><br><span class="line">    V(udp_wrap)         \</span><br><span class="line">    V(url)              \</span><br><span class="line">    V(util)             \</span><br><span class="line">    V(uv)               \</span><br><span class="line">    V(v8)               \</span><br><span class="line">    V(worker)           \</span><br><span class="line">    V(zlib)</span><br></pre></td></tr></table></figure><p>这个宏定义中多次调用宏 <code>V</code>，还记得这个宏吗，在上面定义的：<code>#define V(modname) _register_##modname();</code>，那我们把它展开后就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node_internals.h:106 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_BUILTIN_STANDARD_MODULES(V)  \</span></span><br><span class="line">    _register_async_wrap();</span><br><span class="line">    _register_buffer();</span><br><span class="line">    _register_cares_wrap();</span><br><span class="line">    _register_config();</span><br><span class="line">    _register_contextify();</span><br><span class="line">    _register_domain();</span><br><span class="line">    _register_fs();</span><br><span class="line">    _register_fs_event_wrap();</span><br><span class="line">    _register_heap_utils();</span><br><span class="line">    _register_http2();</span><br><span class="line">    _register_http_parser();</span><br><span class="line">    _register_inspector();</span><br><span class="line">    _register_js_stream();</span><br><span class="line">    _register_messaging();</span><br><span class="line">    _register_module_wrap();</span><br><span class="line">    _register_options();</span><br><span class="line">    _register_os();</span><br><span class="line">    _register_performance();</span><br><span class="line">    _register_pipe_wrap();</span><br><span class="line">    _register_process_wrap();</span><br><span class="line">    _register_serdes();</span><br><span class="line">    _register_signal_wrap();</span><br><span class="line">    _register_spawn_sync();</span><br><span class="line">    _register_stream_pipe();</span><br><span class="line">    _register_stream_wrap();</span><br><span class="line">    _register_string_decoder();</span><br><span class="line">    _register_symbols();</span><br><span class="line">    _register_tcp_wrap();</span><br><span class="line">    _register_timer_wrap();</span><br><span class="line">    _register_trace_events();</span><br><span class="line">    _register_tty_wrap();</span><br><span class="line">    _register_types();</span><br><span class="line">    _register_udp_wrap();</span><br><span class="line">    _register_url();</span><br><span class="line">    _register_util();</span><br><span class="line">    _register_uv();</span><br><span class="line">    _register_v8();</span><br><span class="line">    _register_worker();</span><br><span class="line">    _register_zlib();</span><br></pre></td></tr></table></figure><p>最终，<code>RegisterBuiltinModules()</code> 展开后大概是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RegisterBuiltinModules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  _register_async_wrap();</span><br><span class="line">  _register_buffer();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  _register_os();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过层层的宏展开，我们看到 <code>RegisterBuiltinModules()</code> 的原貌，就是调用了一些全局注册函数，这样就能理解了。</p><p>接下来，我们打算看看这些注册函数是在哪里定义的。 我全局搜索了整个代码目录，也没找到这些函数中的任何一个，看来又是通过宏定义的。</p><p>那我们就挑一个原生模块的源码，来看看里面有没有上面注册函数的定义，我挑了模块名为 <code>os</code> 的模块，它的源码位于 <code>src/node_os.cc</code>：</p><h3 id="查看一个原生模块的源码"><a href="#查看一个原生模块的源码" class="headerlink" title="查看一个原生模块的源码"></a>查看一个原生模块的源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node_os.cc */</span></span><br><span class="line"><span class="keyword">namespace</span> node &#123;</span><br><span class="line"><span class="keyword">namespace</span> os &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetHostname</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetOSType</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetOSRelease</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetCPUInfo</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetFreeMemory</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetTotalMemory</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetUptime</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetLoadAvg</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetInterfaceAddresses</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetHomeDirectory</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetUserInfo</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetPriority</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetPriority</span><span class="params">(<span class="keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个初始化函数是每个原生模块都会定义的，它的参数也是一致的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initialize</span><span class="params">(Local&lt;Object&gt; target,</span></span></span><br><span class="line"><span class="function"><span class="params">                Local&lt;Value&gt; unused,</span></span></span><br><span class="line"><span class="function"><span class="params">                Local&lt;Context&gt; context)</span> </span>&#123;</span><br><span class="line">  Environment* env = Environment::GetCurrent(context);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getHostname"</span>, GetHostname);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getLoadAvg"</span>, GetLoadAvg);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getUptime"</span>, GetUptime);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getTotalMem"</span>, GetTotalMemory);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getFreeMem"</span>, GetFreeMemory);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getCPUs"</span>, GetCPUInfo);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getOSType"</span>, GetOSType);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getOSRelease"</span>, GetOSRelease);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getInterfaceAddresses"</span>, GetInterfaceAddresses);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getHomeDirectory"</span>, GetHomeDirectory);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getUserInfo"</span>, GetUserInfo);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"setPriority"</span>, SetPriority);</span><br><span class="line">  env-&gt;SetMethod(target, <span class="string">"getPriority"</span>, GetPriority);</span><br><span class="line">  target-&gt;Set(FIXED_ONE_BYTE_STRING(env-&gt;isolate(), <span class="string">"isBigEndian"</span>),</span><br><span class="line">              Boolean::New(env-&gt;isolate(), IsBigEndian()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace os</span></span><br><span class="line">&#125;  <span class="comment">// namespace node</span></span><br><span class="line"></span><br><span class="line">NODE_BUILTIN_MODULE_CONTEXT_AWARE(os, node::os::Initialize)</span><br></pre></td></tr></table></figure><p>这个 <code>os</code> 模块先是定义了一些函数，代码最后一行是个宏调用，这个宏把模块名 <code>os</code> 和 <code>Initialize</code> 函数做为其参数，我们找到它的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node_internals.h:169 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_BUILTIN_MODULE_CONTEXT_AWARE(modname, regfunc)   \</span></span><br><span class="line">  NODE_MODULE_CONTEXT_AWARE_CPP(modname, regfunc, <span class="literal">nullptr</span>, NM_F_BUILTIN)</span><br></pre></td></tr></table></figure><p>又是一个宏定义，继续跟下去：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node_internals.h:152*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_MODULE_CONTEXT_AWARE_CPP(modname, regfunc, priv, flags) \</span></span><br><span class="line">  <span class="keyword">static</span> node::node_module _module = &#123; \</span><br><span class="line">    NODE_MODULE_VERSION,    \</span><br><span class="line">    flags,      \</span><br><span class="line">    <span class="literal">nullptr</span>,    \</span><br><span class="line">    __FILE__,   \</span><br><span class="line">    <span class="literal">nullptr</span>,    \</span><br><span class="line">    (node::addon_context_register_func) (regfunc),  \</span><br><span class="line">    NODE_STRINGIFY(modname),    \</span><br><span class="line">    priv,   \</span><br><span class="line">    <span class="literal">nullptr</span> \</span><br><span class="line">  &#125;;    \</span><br><span class="line">  <span class="keyword">void</span> _register_ #<span class="meta"># modname() &#123;    \</span></span><br><span class="line">    node_module_register(&amp;_module); \</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这个宏的定义里好像看到了我们要找的代码，我们在这里就可以把 <code>NODE_BUILTIN_MODULE_CONTEXT_AWARE(os, node::os::Initialize)</code> 完全展开了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 node_module 对象 _module</span></span><br><span class="line"><span class="keyword">static</span> node::node_module _module = &#123;</span><br><span class="line">    NODE_MODULE_VERSION,</span><br><span class="line">    NM_F_BUILTIN,</span><br><span class="line">    <span class="literal">nullptr</span>,</span><br><span class="line">    __FILE__,</span><br><span class="line">    <span class="literal">nullptr</span>,</span><br><span class="line">    (node::addon_context_register_func) (node::os::Initialize),  </span><br><span class="line">    NODE_STRINGIFY(os),</span><br><span class="line">    <span class="literal">nullptr</span>,</span><br><span class="line">    <span class="literal">nullptr</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义我们要找的 _register_os() 函数</span></span><br><span class="line"><span class="keyword">void</span> _register_os() &#123;    </span><br><span class="line">  node_module_register(&amp;_module); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，我们就明白了 <code>RegisterBuiltinModules()</code> 函数中调用的 <code>_register_os()</code> 是在哪里定义的了，随后查看了所有原生模块的代码，最后一行都是以同样的方式定义相应的 <code>_register_xx()</code>。</p><p>其中 <code>node::node_module</code> 类型就代表一个模块的信息。</p><p>所谓注册 <code>os</code> 模块实际是调用了 <code>node_module_register(node_module *)</code> 函数完成的，我们继续来看看 <code>node_module_register()</code> 函数和 <code>node::node_module</code>：</p><h3 id="模块注册实现"><a href="#模块注册实现" class="headerlink" title="模块注册实现"></a>模块注册实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node.h:518*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node_module</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> nm_version;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> nm_flags;</span><br><span class="line">  <span class="keyword">void</span>* nm_dso_handle;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* nm_filename;</span><br><span class="line">  <span class="comment">// 上例中 Initialize 函数被赋到 nm_register_func 里</span></span><br><span class="line">  node::addon_register_func nm_register_func;  </span><br><span class="line">  node::addon_context_register_func nm_context_register_func;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* nm_modname; <span class="comment">// 模块的名字</span></span><br><span class="line">  <span class="keyword">void</span>* nm_priv;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node_module</span>* <span class="title">nm_link</span>;</span>  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node.cc:1094 */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">node_module_register</span><span class="params">(<span class="keyword">void</span>* m)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node_module</span>* <span class="title">mp</span> = <span class="title">reinterpret_cast</span>&lt;struct node_module*&gt;(<span class="title">m</span>);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mp-&gt;nm_flags &amp; NM_F_BUILTIN) &#123;</span><br><span class="line">    <span class="comment">// 链表操作</span></span><br><span class="line">    mp-&gt;nm_link = modlist_builtin;</span><br><span class="line">    modlist_builtin = mp;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mp-&gt;nm_flags &amp; NM_F_INTERNAL) &#123;</span><br><span class="line">    <span class="comment">// 链表操作</span></span><br><span class="line">    mp-&gt;nm_link = modlist_internal;</span><br><span class="line">    modlist_internal = mp;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!node_is_initialized) &#123;</span><br><span class="line">    <span class="comment">// "Linked" modules are included as part of the node project.</span></span><br><span class="line">    <span class="comment">// Like builtins they are registered *before* node::Init runs.</span></span><br><span class="line">    mp-&gt;nm_flags = NM_F_LINKED;</span><br><span class="line">    mp-&gt;nm_link = modlist_linked;</span><br><span class="line">    modlist_linked = mp;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    uv_key_set(&amp;thread_local_modpending, mp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就清晰了， 所谓原生模块的注册，实际上就是将一个类型为 <code>node::node_module</code> 的模块对象，添加到不同类别的全局链表中。</p><p>上述代码中用3个全局链表：<code>modlist_builtin</code> <code>modlist_internal</code> <code>modlist_linked</code> 分别保存不同类型的模块，本文我们说的是 <code>BUILTIN</code> 类型的，也就是第一个。</p><p>我把这几个链表的定义位置发出来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node.cc:175 */</span></span><br><span class="line"><span class="keyword">static</span> node_module* modlist_builtin;   <span class="comment">// 我们现在只关注 builtin 模块</span></span><br><span class="line"><span class="keyword">static</span> node_module* modlist_internal;</span><br><span class="line"><span class="keyword">static</span> node_module* modlist_linked;</span><br><span class="line"><span class="keyword">static</span> node_module* modlist_addon;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这个原生模块的注册过程就写到这里，逻辑还是比较简单的，只是连续的宏定义让代码不那么直观。</p><p>原生模块加载写完后，接下来，会继续写原生模块的加载篇。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇提到 &lt;code&gt;RegisterBuiltinModules()&lt;/code&gt; 注册了原生 C++ 模块没有详细展开，这里就从这个函数展开。&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js 源码分析" scheme="http://maslow.github.io/categories/Node-js-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Node.js" scheme="http://maslow.github.io/tags/Node-js/"/>
    
      <category term="Node.js 源码分析" scheme="http://maslow.github.io/tags/Node-js-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="源码分析" scheme="http://maslow.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 源码分析 - 从 main 函数开始</title>
    <link href="http://maslow.github.io/nodejs/nodejs-src/the-main/"/>
    <id>http://maslow.github.io/nodejs/nodejs-src/the-main/</id>
    <published>2018-11-27T13:30:15.000Z</published>
    <updated>2018-11-27T18:35:30.192Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小目标"><a href="#小目标" class="headerlink" title="小目标"></a>小目标</h3><blockquote><p>知道程序大概执行逻辑，关键点执行的顺序</p></blockquote><p>我们平时在命令敲下 <code>node app.js</code> 后，发生了什么。</p><p>具体点，知道 node.js 原生(C++)模块什么时候加载的，在哪加载的;<br>知道我们的 js 代码是在哪个环节被加载执行的；<br>知道进程的主循环（事件循环）什么时候启动的；</p><p>有了这个小目标的基础，在接下来的文章中，我们再进一步的探索 node.js 原生模块的注册是怎么实现的，怎么获取 &amp; 初始化的，怎么曝露给 js 环境调用的；再细说 node.js 的模块机制，我们通常的 <code>app.js</code> 怎么被执行的；</p><a id="more"></a><h3 id="贴代码说明"><a href="#贴代码说明" class="headerlink" title="贴代码说明"></a>贴代码说明</h3><p>限于篇幅，本文只先把大体执行流程捋出来，后面再开文一块块的捋。</p><p>原代码太长，先把不影响我们分析的无关代码去掉，贴上来有关整体执行逻辑的代码，代码中的 <code>// ...</code> 注释意思是这个地方有被省略的代码。</p><p>每段代码第一行的注释都会指出源文件位置，一些代码讲解会在代码段中的注释中进行；</p><p>本文不再介绍 V8 和 Libuv 的知识，会开专门的分类写 V8 和 Libuv，参考 <a href="/nodejs/nodejs-src/index/" title="Node.js 源码分析 - 前言">Node.js 源码分析 - 前言</a></p><h3 id="开捋：从-main-函数到进程主循环"><a href="#开捋：从-main-函数到进程主循环" class="headerlink" title="开捋：从 main 函数到进程主循环"></a>开捋：从 main 函数到进程主循环</h3><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node_main.cc:93 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> node::Start(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main函数</code> 在 <code>src/node_main.cc</code> 这个文件中，这个文件主要就是存放 <code>main函数</code>。</p><p>很简单，只是调用了 <code>node::Start()</code>，这个函数在 <code>src/node.cc</code> 这个文件中，接下来的核心代码都在这个文件中。</p><h4 id="初始化-V8-引擎"><a href="#初始化-V8-引擎" class="headerlink" title="初始化 V8 引擎"></a>初始化 V8 引擎</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node.cc:3011 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Start</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; args(argv, argv + argc);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; exec_args;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This needs to run *before* V8::Initialize().</span></span><br><span class="line">  Init(&amp;args, &amp;exec_args);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  v8_platform.Initialize(per_process_opts-&gt;v8_thread_pool_size);</span><br><span class="line">  V8::Initialize();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> exit_code = Start(uv_default_loop(), args, exec_args);</span><br><span class="line"></span><br><span class="line">  v8_platform.StopTracingAgent();</span><br><span class="line">  v8_initialized = <span class="literal">false</span>;</span><br><span class="line">  V8::Dispose();</span><br><span class="line">  v8_platform.Dispose();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exit_code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码，首先进行 V8 的初始化，然后调用了另外一个 <code>Start(uv_loop_t*, ...)</code>函数，最后释放资源，进程结束；</p><p>其中值得注意的一点，在初始化 V8 之前，调用了一个 <code>Init()</code> 函数，这个函数主要完成了 Node.js 原生(C++)模块的注册，就是 <code>fs</code> <code>http</code>等模块的 C++ 实现模块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node.cc:2559 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;* argv, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;* exec_argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// Register built-in modules</span></span><br><span class="line">  RegisterBuiltinModules();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Init()</code> 中调用了 <code>RegisterBuiltinModules()</code>，它注册了所有 Node.js 原生模块，关于原生模块的注册，本文不再继续跟进去，下一篇会单独展开这一块，这里先知道这个流程。</p><blockquote><p>记住这个 <code>RegisterBuiltinModules()</code>，下一篇文章就从这里开始展开。</p></blockquote><h4 id="创建-Isolate-实例"><a href="#创建-Isolate-实例" class="headerlink" title="创建 Isolate 实例"></a>创建 Isolate 实例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node.cc:2964 */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Start</span><span class="params">(<span class="keyword">uv_loop_t</span>* event_loop,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; exec_args)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;ArrayBufferAllocator, <span class="keyword">decltype</span>(&amp;FreeArrayBufferAllocator)&gt;</span><br><span class="line">      allocator(CreateArrayBufferAllocator(), &amp;FreeArrayBufferAllocator);</span><br><span class="line">  <span class="comment">// 创建 Isolate 实例</span></span><br><span class="line">  Isolate* <span class="keyword">const</span> isolate = NewIsolate(allocator.get());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">int</span> exit_code;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">Locker <span class="title">locker</span><span class="params">(isolate)</span></span>;</span><br><span class="line">    Isolate::<span class="function">Scope <span class="title">isolate_scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line">    <span class="function">HandleScope <span class="title">handle_scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    exit_code = Start(isolate, isolate_data.get(), args, exec_args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  isolate-&gt;Dispose();</span><br><span class="line">  <span class="keyword">return</span> exit_code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>Start()</code> 倒也没做什么，主要工作是创建了 Isolate 实例，然后调用了另外一个 <code>Start(Isolate*...)</code>。</p><h4 id="进程主循环"><a href="#进程主循环" class="headerlink" title="进程主循环"></a>进程主循环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node.cc:2868 */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Start</span><span class="params">(Isolate* isolate, IsolateData* isolate_data,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; exec_args)</span> </span>&#123;</span><br><span class="line">  <span class="function">HandleScope <span class="title">handle_scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line">  <span class="comment">// 创建 V8 Context 对象</span></span><br><span class="line">  Local&lt;Context&gt; context = NewContext(isolate);</span><br><span class="line">  Context::<span class="function">Scope <span class="title">context_scope</span><span class="params">(context)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建 Environment 对象，这个是 Node.js 的类</span></span><br><span class="line">  <span class="function">Environment <span class="title">env</span><span class="params">(isolate_data, context, v8_platform.GetTracingAgentWriter())</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这里面主要完成 libuv 的初始化，以及创建 process 对象</span></span><br><span class="line">  <span class="comment">// 就是 Node.js 中那个全局的 process 对象，这里不细展开</span></span><br><span class="line">  env.Start(args, exec_args, v8_is_profiling);</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// LoadEnvironment 是本文重要的关键点</span></span><br><span class="line">    LoadEnvironment(&amp;env);</span><br><span class="line">    env.async_hooks()-&gt;pop_async_id(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下面就是进程的主循环</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">bool</span> more;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      uv_run(env.event_loop(), UV_RUN_DEFAULT);</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      more = uv_loop_alive(env.event_loop());</span><br><span class="line">      <span class="keyword">if</span> (more)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (more == <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> exit_code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码创建并使用了 js 执行需要的 context，然后创建了 <code>Environment</code> 对象；</p><p>这个 <code>Environment</code> 对象是 Node.js 源码中重要的一个对象，它是一个全局单例，定义和存储了一些重要的全局对象和函数，比如刚开始创建的 Isolate 对象、刚刚创建的 Context 对象等，注意它不是 V8 的，是 Node.js 定义的，对它的使用贯穿整个 Node.js 执行的生命周期。</p><p>再下面是进程的主循环，<code>uv_run()</code> 启动了 <code>Libuv</code> 的事件循环， 它也是 Node.js 进程的主循环，<code>Libuv</code> 会单独写文介绍。</p><p>最后说一下，中间的 <code>LoadEnvironment()</code> 调用，它是在程序进入主循环之前最关键的一环；</p><p><code>LoadEnvironment()</code> 完成了一些 js 文件的加载和执行，其中就包括加载执行通常编写的 <code>app.js</code>。</p><h4 id="主循环之前"><a href="#主循环之前" class="headerlink" title="主循环之前"></a>主循环之前</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/node.cc:2115 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadEnvironment</span><span class="params">(Environment* env)</span> </span>&#123;</span><br><span class="line">  <span class="function">HandleScope <span class="title">handle_scope</span><span class="params">(env-&gt;isolate())</span></span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The bootstrapper scripts are lib/internal/bootstrap/loaders.js and</span></span><br><span class="line">  <span class="comment">// lib/internal/bootstrap/node.js, each included as a static C string</span></span><br><span class="line">  <span class="comment">// defined in node_javascript.h, generated in node_javascript.cc by</span></span><br><span class="line">  <span class="comment">// node_js2c.</span></span><br><span class="line">  <span class="comment">// 加载两个重要的 js 文件：internal/bootstrap/loaders.js </span></span><br><span class="line">  <span class="comment">// 和 internal/bootstrap/node.js</span></span><br><span class="line">  Local&lt;String&gt; loaders_name =</span><br><span class="line">      FIXED_ONE_BYTE_STRING(env-&gt;isolate(), <span class="string">"internal/bootstrap/loaders.js"</span>);</span><br><span class="line">  MaybeLocal&lt;Function&gt; loaders_bootstrapper =</span><br><span class="line">      GetBootstrapper(env, LoadersBootstrapperSource(env), loaders_name);</span><br><span class="line">  Local&lt;String&gt; node_name =</span><br><span class="line">      FIXED_ONE_BYTE_STRING(env-&gt;isolate(), <span class="string">"internal/bootstrap/node.js"</span>);</span><br><span class="line">  MaybeLocal&lt;Function&gt; node_bootstrapper =</span><br><span class="line">      GetBootstrapper(env, NodeBootstrapperSource(env), node_name);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// Add a reference to the global object</span></span><br><span class="line">  Local&lt;Object&gt; global = env-&gt;context()-&gt;Global();</span><br><span class="line"></span><br><span class="line">  env-&gt;SetMethod(env-&gt;process_object(), <span class="string">"_rawDebug"</span>, RawDebug);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Expose the global object as a property on itself</span></span><br><span class="line">  <span class="comment">// (Allows you to set stuff on `global` from anywhere in JavaScript.)</span></span><br><span class="line">  global-&gt;Set(FIXED_ONE_BYTE_STRING(env-&gt;isolate(), <span class="string">"global"</span>), global);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 准备 binding 函数，下面调用 js 会作为参数传给 js 环境</span></span><br><span class="line">  <span class="comment">// Create binding loaders</span></span><br><span class="line">  Local&lt;Function&gt; get_binding_fn =</span><br><span class="line">      env-&gt;NewFunctionTemplate(GetBinding)-&gt;GetFunction(env-&gt;context())</span><br><span class="line">          .ToLocalChecked();</span><br><span class="line"></span><br><span class="line">  Local&lt;Function&gt; get_linked_binding_fn =</span><br><span class="line">      env-&gt;NewFunctionTemplate(GetLinkedBinding)-&gt;GetFunction(env-&gt;context())</span><br><span class="line">          .ToLocalChecked();</span><br><span class="line"></span><br><span class="line">  Local&lt;Function&gt; get_internal_binding_fn =</span><br><span class="line">      env-&gt;NewFunctionTemplate(GetInternalBinding)-&gt;GetFunction(env-&gt;context())</span><br><span class="line">          .ToLocalChecked();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 准备执行 internal/bootstrap/loaders.js 文件的参数</span></span><br><span class="line">  Local&lt;Value&gt; loaders_bootstrapper_args[] = &#123;</span><br><span class="line">    env-&gt;process_object(),</span><br><span class="line">    get_binding_fn,</span><br><span class="line">    get_linked_binding_fn,</span><br><span class="line">    get_internal_binding_fn,</span><br><span class="line">    Boolean::New(env-&gt;isolate(),</span><br><span class="line">                 env-&gt;options()-&gt;debug_options-&gt;break_node_first_line)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行 internal/bootstrap/loaders.js </span></span><br><span class="line">  <span class="comment">// Bootstrap internal loaders</span></span><br><span class="line">  <span class="comment">// 这个对象是用来接收执行结果的，记住是 bootstrapped_loaders，下面会用到</span></span><br><span class="line">  Local&lt;Value&gt; bootstrapped_loaders;</span><br><span class="line">  <span class="keyword">if</span> (!ExecuteBootstrapper(env, loaders_bootstrapper.ToLocalChecked(),</span><br><span class="line">                           arraysize(loaders_bootstrapper_args),</span><br><span class="line">                           loaders_bootstrapper_args,</span><br><span class="line">                           &amp;bootstrapped_loaders)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 准备执行 internal/bootstrap/node.js 的参数</span></span><br><span class="line">  <span class="comment">// Bootstrap Node.js</span></span><br><span class="line">  Local&lt;Object&gt; bootstrapper = Object::New(env-&gt;isolate());</span><br><span class="line">  SetupBootstrapObject(env, bootstrapper);</span><br><span class="line">  Local&lt;Value&gt; bootstrapped_node;</span><br><span class="line">  Local&lt;Value&gt; node_bootstrapper_args[] = &#123;</span><br><span class="line">    env-&gt;process_object(),</span><br><span class="line">    bootstrapper,</span><br><span class="line">    <span class="comment">// 注意，这里是上面执行 loaders.js 返回的结果对象，</span></span><br><span class="line">    <span class="comment">// 作为执行参数传给 internal/bootstrap/node.js</span></span><br><span class="line">    bootstrapped_loaders  </span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行 internal/bootstrap/node.js</span></span><br><span class="line">  <span class="keyword">if</span> (!ExecuteBootstrapper(env, node_bootstrapper.ToLocalChecked(),</span><br><span class="line">                           arraysize(node_bootstrapper_args),</span><br><span class="line">                           node_bootstrapper_args,</span><br><span class="line">                           &amp;bootstrapped_node)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LoadEnvironment()</code> 首先加载了两个 js 文件，这两个 js 文件的位置分别在：<br><code>lib/internal/bootstrap/loaders.js</code> 和 <code>lib/internal/bootstrap/node.js</code>。</p><p>我们 Node.js 开发者写的 <code>app.js</code> 其实就是在这两个 js 文件中加载并执行的，这块是最重要的逻辑之一，内容也很多，后面的文章会详细展开。</p><p><code>LoadEnvironment()</code> 接下来创建了三个 binding 函数：</p><ul><li><code>get_binding_fn</code> </li><li><code>get_linked_binding_fn</code></li><li><code>get_internal_binding_fn</code></li></ul><p>这3个 binding 函数是用来获取和加载 Node.js 原生模块的，会传入到 js 执行环境中，也就是你在 js 代码中是可以调用的，比如 <code>process.binding(&#39;fs&#39;)</code>，在我们用 C++ 开发 Node.js 扩展模块的时候，也会用到，以后会详细展开。</p><p><code>LoadEnvironment()</code> 接下来要执行 <code>lib/internal/bootstrap/loaders.js</code>，在这个 js 文件中主要定义了内部(internal)模块加载器(loaders)。</p><p><code>lib/internal/bootstrap/loaders.js</code> 定义的模块加载器(loaders) 接下来做为执行参数，传入了 <code>lib/internal/bootstrap/node.js</code>，在 <code>lib/internal/bootstrap/node.js</code> 中会使用这些 loaders 来加载 internal 模块。</p><p><code>lib/internal/bootstrap/node.js</code> 做了很多工作，这里只需要知道，它最终加载并执行了我们 Node.js 程序员编写的 <code>app.js</code> 就可以了。</p><p>到此为止，我们就知道了在命令行敲下 <code>node app.js</code> 大概发生了哪些事！</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这只是个大概逻辑，可以配合 Node.js 源码，再花时间捋一捋，光靠贴的这点代码，可能还是会迷糊的。</p><p>接下来的文章，就是对这个执行逻辑中的关键点分别展开。</p><p>作者水平有限，写的也仓促，有误之处还请指出。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小目标&quot;&gt;&lt;a href=&quot;#小目标&quot; class=&quot;headerlink&quot; title=&quot;小目标&quot;&gt;&lt;/a&gt;小目标&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;知道程序大概执行逻辑，关键点执行的顺序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们平时在命令敲下 &lt;code&gt;node app.js&lt;/code&gt; 后，发生了什么。&lt;/p&gt;
&lt;p&gt;具体点，知道 node.js 原生(C++)模块什么时候加载的，在哪加载的;&lt;br&gt;知道我们的 js 代码是在哪个环节被加载执行的；&lt;br&gt;知道进程的主循环（事件循环）什么时候启动的；&lt;/p&gt;
&lt;p&gt;有了这个小目标的基础，在接下来的文章中，我们再进一步的探索 node.js 原生模块的注册是怎么实现的，怎么获取 &amp;amp; 初始化的，怎么曝露给 js 环境调用的；再细说 node.js 的模块机制，我们通常的 &lt;code&gt;app.js&lt;/code&gt; 怎么被执行的；&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js 源码分析" scheme="http://maslow.github.io/categories/Node-js-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Node.js" scheme="http://maslow.github.io/tags/Node-js/"/>
    
      <category term="Node.js 源码分析" scheme="http://maslow.github.io/tags/Node-js-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="源码分析" scheme="http://maslow.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 源码分析 - 前言</title>
    <link href="http://maslow.github.io/nodejs/nodejs-src/index/"/>
    <id>http://maslow.github.io/nodejs/nodejs-src/index/</id>
    <published>2018-11-24T14:30:15.000Z</published>
    <updated>2018-12-02T15:07:12.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这两年先后两次读过 Node.js 源码，但是每次都懒于记录，过几个月就忘记了，这次把疏理过程记录下来，免得以后再费时间从头看。虽然是为了备忘，我会尽量以读者的角度去写，希望能给想了解 Node.js 源码的朋友节省一些时间。</p></blockquote><h3 id="适合谁"><a href="#适合谁" class="headerlink" title="适合谁"></a>适合谁</h3><pre><code>- 你需要熟悉 C/C++- 你需要熟悉 Node.js，理解异步编程及原理</code></pre><a id="more"></a><h3 id="分析方式"><a href="#分析方式" class="headerlink" title="分析方式"></a>分析方式</h3><p>根据执行流程，直接从 main 函数开始走， 然后再单独分析具体模块。</p><p>疏理执行逻辑是这次分析的重点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>我使用的版本是 node.js 仓库里 v10.x 分支。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:nodejs/node.git </span><br><span class="line"><span class="built_in">cd</span> node</span><br><span class="line">git checkout v10.x</span><br></pre></td></tr></table></figure></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>V8 Embedding:</p><ul><li><a href="/v8/compile-v8/" title="Javascript Engine V8 Embedding - 编译">Javascript Engine V8 Embedding - 编译</a></li><li><a href="/v8/v8-embedding-hello-world/" title="Javascript Engine V8 Embedding - Hello World 讲解">Javascript Engine V8 Embedding - Hello World 讲解</a></li></ul><p>Node.js 源码分析:</p><ul><li><a href="/nodejs/nodejs-src/the-main/" title="从 main 函数开始">从 main 函数开始</a></li><li><a href="/nodejs/nodejs-src/register-builtin-modules/" title="原生模块的注册">原生模块的注册</a></li></ul><blockquote><p>持续更新中</p></blockquote><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><p>Libuv 官网 User Guide 很友好：<a href="http://docs.libuv.org/en/v1.x/guide.html" target="_blank" rel="noopener">http://docs.libuv.org/en/v1.x/guide.html</a></p></li><li><p>Node.js 源码：<a href="https://github.com/nodejs/node" target="_blank" rel="noopener">https://github.com/nodejs/node</a></p></li><li><p>Node.js 源码构建：<a href="https://github.com/nodejs/node/blob/master/BUILDING" target="_blank" rel="noopener">https://github.com/nodejs/node/blob/master/BUILDING</a>.</p></li><li><p>V8 构建：<a href="https://v8.dev/docs/build" target="_blank" rel="noopener">https://v8.dev/docs/build</a></p></li><li><p>V8 Embedding: <a href="https://v8.dev/docs/embed" target="_blank" rel="noopener">https://v8.dev/docs/embed</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这两年先后两次读过 Node.js 源码，但是每次都懒于记录，过几个月就忘记了，这次把疏理过程记录下来，免得以后再费时间从头看。虽然是为了备忘，我会尽量以读者的角度去写，希望能给想了解 Node.js 源码的朋友节省一些时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;适合谁&quot;&gt;&lt;a href=&quot;#适合谁&quot; class=&quot;headerlink&quot; title=&quot;适合谁&quot;&gt;&lt;/a&gt;适合谁&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 你需要熟悉 C/C++
- 你需要熟悉 Node.js，理解异步编程及原理
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Node.js 源码分析" scheme="http://maslow.github.io/categories/Node-js-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Node.js" scheme="http://maslow.github.io/tags/Node-js/"/>
    
      <category term="Node.js 源码分析" scheme="http://maslow.github.io/tags/Node-js-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="源码分析" scheme="http://maslow.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>动手写一个简单的 Promise.js</title>
    <link href="http://maslow.github.io/javascript/diy-simple-promise-js/"/>
    <id>http://maslow.github.io/javascript/diy-simple-promise-js/</id>
    <published>2018-11-23T18:07:14.000Z</published>
    <updated>2018-11-23T19:00:16.701Z</updated>
    
    <content type="html"><![CDATA[<p>初学 <code>Node.js</code> 的朋友总会耗一番周折去理解 <code>Promise</code>，这里给出一个最简单的 <code>Promise</code> 实现，以帮助对 <code>Promise</code> 还有疑惑的同学彻底理解其实现原理。</p><a id="more"></a><blockquote><p>这个代码应该是三年前我刚接触 <code>Node.js</code> 的时候写的了，当时也是 Google 不少关于 <code>Promise</code> 的文章，现在已经不记得相关链接了。</p></blockquote><blockquote><p>这个并不是完整的 <code>Promise</code> 逻辑，旨在理解 <code>Promise</code> 的实现原理，由于过了太久，我就直接贴出来代码不做解释说明了。如果先前有用过 <code>Promise</code> 的话，应该还是较容易理解的； 若是初接触，这个逻辑还是有点绕，先去其它地方了解 Promse 的用法，再多花点时间去理一理这段代码，是值得的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    self.state = <span class="string">'PENDING'</span></span><br><span class="line">    self.onFulfilled = <span class="literal">null</span></span><br><span class="line">    self.onRejected = <span class="literal">null</span></span><br><span class="line">    self.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            that.onFulfilled = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ret = onResolved ? onResolved(val) : val;</span><br><span class="line">                <span class="keyword">if</span> (ret &amp;&amp; ret.then) &#123;</span><br><span class="line">                    ret.then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">                        resolve(val)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    resolve(ret);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            that.onRejected = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ret = onRejected ? onRejected(val) : val;</span><br><span class="line">                reject(ret);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    fn &amp;&amp; fn(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (self.state === <span class="string">'PENDING'</span>) &#123;</span><br><span class="line">            self.state = <span class="string">'FULFILLED'</span>;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                self.onFulfilled &amp;&amp; self.onFulfilled(result);</span><br><span class="line">            &#125;,<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (self.state === <span class="string">'PENDING'</span>) &#123;</span><br><span class="line">            self.state = <span class="string">'REJECTED'</span>;</span><br><span class="line">            self.onRejected &amp;&amp; self.onRejected(reason);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(t)</span><br><span class="line">            resolve(t)</span><br><span class="line">        &#125;, t)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1000</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> sleep(data + <span class="number">1</span>))</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> sleep(data + <span class="number">1</span>))</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> sleep(data + <span class="number">1</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初学 &lt;code&gt;Node.js&lt;/code&gt; 的朋友总会耗一番周折去理解 &lt;code&gt;Promise&lt;/code&gt;，这里给出一个最简单的 &lt;code&gt;Promise&lt;/code&gt; 实现，以帮助对 &lt;code&gt;Promise&lt;/code&gt; 还有疑惑的同学彻底理解其实现原理。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://maslow.github.io/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="http://maslow.github.io/tags/javascript/"/>
    
      <category term="promise" scheme="http://maslow.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>GitLab CI 示例：Docker 镜像打包发布 &amp; SSH 部署</title>
    <link href="http://maslow.github.io/gitlab-ci/example-docker-ssh-deploy/"/>
    <id>http://maslow.github.io/gitlab-ci/example-docker-ssh-deploy/</id>
    <published>2018-11-18T13:44:35.000Z</published>
    <updated>2018-12-11T02:20:48.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>当我们 push 代码到 git 仓库时，将项目部署到目标服务器上，具体步骤：</p><pre><code>- 基于代码仓库中的 Dockerfile 构建代码镜像- 将构建的代码镜像推送到我们的私有镜像仓库- 通过 ssh 连接目标服务器，远程执行部署指令，基于代码镜像启动容器</code></pre><a id="more"></a><h3 id="示例代码说明"><a href="#示例代码说明" class="headerlink" title="示例代码说明"></a>示例代码说明</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="attr">  TARGET_IMAGE:</span> <span class="string">$REGISTRY_ADDR/maslow/ci-example-app:latest</span></span><br><span class="line"><span class="attr">  DOCKER_DRIVER:</span> <span class="string">overlay2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">docker:stable</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">login</span> <span class="bullet">-u</span> <span class="string">$REGISTRY_USER</span> <span class="bullet">-p</span> <span class="string">$REGISTRY_PASSWORD</span> <span class="string">$REGISTRY_ADDR</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">pull</span> <span class="string">$TARGET_IMAGE</span> <span class="string">||</span> <span class="literal">true</span>   <span class="comment"># for docker build caching</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">build</span> <span class="bullet">--cache-from</span> <span class="string">$TARGET_IMAGE</span> <span class="bullet">--tag</span> <span class="string">$TARGET_IMAGE</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$TARGET_IMAGE</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">ubuntu:latest</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'which ssh-agent || (apt-get update -y &amp;&amp; apt-get install openssh-client -y)'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">eval</span> <span class="string">$(ssh-agent</span> <span class="bullet">-s)</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">"$SERVER_SSH_PRIV_KEY"</span> <span class="string">&gt; deploy.key</span></span><br><span class="line"><span class="string">    - mkdir -p ~/.ssh</span></span><br><span class="line"><span class="string">    - chmod 0600 deploy.key</span></span><br><span class="line"><span class="string">    - ssh-add deploy.key</span></span><br><span class="line"><span class="string">    - '[[ -f /.dockerenv ]] &amp;&amp; echo -e "Host *\n\tStrictHostKeyChecking no\n\n" &gt; ~/.ssh/config'</span></span><br><span class="line"><span class="string">    - ssh root@$SERVER_ADDR "docker run -d -P $&#123;TARGET_IMAGE&#125;"</span></span><br></pre></td></tr></table></figure><p>这段 CI 脚本有两个 stage:</p><pre><code>- build  # 根据代码目录下的 Dockerfile 构建镜像，并 push 到镜像仓库- deploy # 通过 ssh 连接目标服务器，远程执行部署指令</code></pre><p>其中用到了一些预定义了一些环境变量：</p><pre><code>- REGISTRY_ADDR   # 私有镜像仓库的地址，例如：registry.cn-hangzhou.aliyuncs.com- REGISTRY_USER   # 私有镜像仓库用户名- REGISTRY_PASSWORD     # 私有镜像仓库密码- SERVER_SSH_PRIV_KEY   # 登陆目标服务器的私钥- SERVER_ADDR           # 目标服务器的地址</code></pre><p>预定义的环境变量并不在 <code>.gitlab-ci.yml</code> 中定义，因为它们往往是一些敏感信息，具体的设置方式是提前在 GitLab Web 端代码仓库设置页面填写：<code>Settings &gt; CI/CD &gt; Variables</code>。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li>GitLab Variables: <a href="https://docs.gitlab.com/ee/ci/variables/README.html#variables" target="_blank" rel="noopener">https://docs.gitlab.com/ee/ci/variables/README.html#variables</a></li><li>Using SSH keys with GitLab CI/CD: <a href="https://docs.gitlab.com/ee/ci/ssh_keys/README.html" target="_blank" rel="noopener">https://docs.gitlab.com/ee/ci/ssh_keys/README.html</a></li><li>Building Docker images with GitLab CI/CD:<br><a href="https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#making-docker-in-docker-builds-faster-with-docker-layer-caching" target="_blank" rel="noopener">https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#making-docker-in-docker-builds-faster-with-docker-layer-caching</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;p&gt;当我们 push 代码到 git 仓库时，将项目部署到目标服务器上，具体步骤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 基于代码仓库中的 Dockerfile 构建代码镜像
- 将构建的代码镜像推送到我们的私有镜像仓库
- 通过 ssh 连接目标服务器，远程执行部署指令，基于代码镜像启动容器
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="GitLab CI/CD" scheme="http://maslow.github.io/categories/GitLab-CI-CD/"/>
    
    
      <category term="gitlab" scheme="http://maslow.github.io/tags/gitlab/"/>
    
      <category term="gitlab-ci" scheme="http://maslow.github.io/tags/gitlab-ci/"/>
    
      <category term="CI/CD" scheme="http://maslow.github.io/tags/CI-CD/"/>
    
      <category term="DevOps" scheme="http://maslow.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>GitLab CI 示例：构建 &amp; 测试 Node.js 应用</title>
    <link href="http://maslow.github.io/gitlab-ci/example-node-js/"/>
    <id>http://maslow.github.io/gitlab-ci/example-node-js/</id>
    <published>2018-11-13T16:18:13.000Z</published>
    <updated>2018-12-10T14:26:28.529Z</updated>
    
    <content type="html"><![CDATA[<p>通过解释说明一个简单的 Node.js 应用的 <code>Pipeline</code> 示例来介绍 GitLab CI 的工作方式和使用。</p><p>其中会重点介绍 GitLab CI 的执行过程，<code>Stage</code> <code>Job</code> 等基础概念，以及缓存策略。<br><a id="more"></a></p><h2 id="示例定义"><a href="#示例定义" class="headerlink" title="示例定义"></a>示例定义</h2><p>下面是一个简单的 Node.js 应用的 pipeline 定义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_job:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:10</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">version</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test_job:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:10</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h2 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h2><p>逐一介绍一下这几个字段：</p><h3 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>stage 定义了 pipeline 的执行步骤，也就是说 stages 是有序执行的。每个 stages 可包括多个 Job，Job 才是 CI Runner 要执行的任务。</p><p>上面的 pipeline 包括 build 和 test 两个步骤，先执行完所有 build 阶段的 Job，才会执行 test 阶段的 Job。</p><p>如果 build 阶段的 Job 执行失败了，则整个 pipeline 失败并中断执行，不会继续执行 test stage 了。</p><p>下面就来介绍什么是 Job.</p><h3 id="build-job"><a href="#build-job" class="headerlink" title="build_job"></a>build_job</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build_job:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:10</span> </span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">version</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><p><code>build_job</code> 是 Job 的名称，可以自由定义；</p><p><code>stage</code> 字段指定该 Job 属于 <code>build</code> 阶段的；</p><p><code>script</code> 就是自定义的构建脚本了，这里就是简单的 <code>npm install</code>；</p><p><code>image</code> 这个是指定 <code>script</code> 脚本的执行环境，它的值应该是一个 Docker 镜像。</p><p>Runner 开始执行这个 Job 时，首先会 pull 项目的最新代码，然后基于这个镜像启动一个容器并把代码挂载到容器里，最后在这个容器里面执行 <code>script</code> 定义的脚本。因为我们这里使用的是 node:10 作为作业的镜像，所以在 <code>script</code> 里才可以直接用 npm。</p><h3 id="test-job"><a href="#test-job" class="headerlink" title="test_job"></a>test_job</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test_job:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:10</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p><code>test_job</code> 同样是一个 Job，它属于 <code>test stage</code>，在上面的 <code>stages</code> 定义中 <code>test</code> 是在 <code>build</code> 之后的，所以它会等所有 <code>build</code> 阶段的 Job 执行完之后才会被执行。</p><blockquote><p>重点来了：每个 Job 是独立执行的，互相隔离的。 Runner 在执行 <code>test_job</code> 的时候，会重新 pull 应用的最新代码，然后启动一个新容器并挂载代码，再在里面执行 script 脚本。 </p></blockquote><p>这就会导致一个问题： 在 <code>test_job</code> 中我们并没有执行 <code>npm install</code> 就直接执行了 <code>npm run test</code>，理论上会是报错的！</p><p>这就要介绍最后一个未介绍的字段 <code>cache</code>.</p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules/</span></span><br></pre></td></tr></table></figure><p><code>cache</code> 是 pipeline 中定义 Job 之间的缓存的；</p><p>我们这里定义的 <code>cache</code> 是全局的，即作用于所有 Job 的；</p><p><code>paths</code> 定义需要缓存的目录，若需要，你可以指定多个；</p><p>缓存的逻辑是这样的：</p><pre><code>- 执行 build_job 时会检查之前无有缓存- 如果有缓存就下载到 `paths` 指定的缓存目录，无则忽略- build_job 执行结束之前，会重新把缓存目录缓存起来- test_job 执行之前，同样检查有无缓存，有则下载</code></pre><p>所以，test_job 的 script 中没有执行 <code>npm install</code> 是因为我们将 <code>node_modules</code> 目录缓存了。</p><p>缓存是提高 Job 执行效率的策略，不仅仅是多个 Job 之间； </p><p>同一个 Job 在多次 pipeline 中也会共用缓存，意思是：</p><pre><code>- build_job 第一次运行时并没有缓存- 下次 pipeline 执行时，npm install 就会基于缓存的 node_modules 更新，而不是全量下载了</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这个示例，基本就了解 GitLab CI 的工作过程和定义方式了；</p><p>其中缓存策略是非常常用的，这里使用的是全局缓存，还可以指定某个 Job 特有有缓存策略。</p><p>想进一步了解缓存，请查看官方文档关于缓存的详细说明:<br><a href="https://docs.gitlab.com/ee/ci/yaml/README.html#cache" target="_blank" rel="noopener">https://docs.gitlab.com/ee/ci/yaml/README.html#cache</a></p><p>这个简单的示例，只是展示了 Node.js 应用的构建和测试，一个更完整的 CI 流程通常还会包括 <code>部署(deploy)</code>，接下来会继续通过示例讲解使用 GitLab CI 的更多使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过解释说明一个简单的 Node.js 应用的 &lt;code&gt;Pipeline&lt;/code&gt; 示例来介绍 GitLab CI 的工作方式和使用。&lt;/p&gt;
&lt;p&gt;其中会重点介绍 GitLab CI 的执行过程，&lt;code&gt;Stage&lt;/code&gt; &lt;code&gt;Job&lt;/code&gt; 等基础概念，以及缓存策略。&lt;br&gt;
    
    </summary>
    
      <category term="GitLab CI/CD" scheme="http://maslow.github.io/categories/GitLab-CI-CD/"/>
    
    
      <category term="gitlab" scheme="http://maslow.github.io/tags/gitlab/"/>
    
      <category term="gitlab-ci" scheme="http://maslow.github.io/tags/gitlab-ci/"/>
    
      <category term="CI/CD" scheme="http://maslow.github.io/tags/CI-CD/"/>
    
      <category term="DevOps" scheme="http://maslow.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>GitLab CI 基本介绍</title>
    <link href="http://maslow.github.io/gitlab-ci/index/"/>
    <id>http://maslow.github.io/gitlab-ci/index/</id>
    <published>2018-11-08T16:03:53.000Z</published>
    <updated>2018-12-11T02:16:36.620Z</updated>
    
    <content type="html"><![CDATA[<img src="https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png"><blockquote><p>这篇基本介绍只介绍 GitLab CI，不会写具体的使用细节，旨在让新接触 GitLab CI 的同学先对它有个基本的认识，直接看官网文档可能需要多花点时间才能理清一些概念。</p></blockquote><blockquote><p>GitLab CI 的设计很灵活，有多种使用方案，我在接下来会针对最常用的几种情况写一系列包括实现细节步骤的文章。</p></blockquote><a id="more"></a><h3 id="前置需求"><a href="#前置需求" class="headerlink" title="前置需求"></a>前置需求</h3><p>当前有 3 台服务器 develop, staging, production 分别对应代码仓库上的三个分支：develop, staging, master。</p><p>要求 push 代码到仓库时会触发 CI 的执行：</p><pre><code>1. build app2. testing app3. deploy to server</code></pre><p>代码 push 到哪个分支，就把项目部署到相应的服务器上。</p><h3 id="GitLab-CI-的重要概念"><a href="#GitLab-CI-的重要概念" class="headerlink" title="GitLab CI 的重要概念"></a>GitLab CI 的重要概念</h3><p>要理解 GitLab CI 的工作方式，必须要理解两个概念：</p><pre><code>- Pipeline- Runner</code></pre><p>上面说的 CI 执行过程就是 <code>pipeline</code>，它定义了项目的构建、测试、部署等的执行过程。</p><p>我们需要在每个项目上定义一个 <code>pipeline</code>。</p><p>定义一个 <code>pipeline</code> 就是在项目代码根目录创建文件：<code>.gitlab-ci.yml</code>.</p><p>定义好 <code>pipeline</code> 后，GitLab CI 会读取并执行这个 <code>pipeline</code>，执行的程序叫做 <code>Runner</code>。</p><p><code>Runner</code> 是负责执行 <code>pipeline</code> 的程序。</p><p>通常 <code>Runner</code> 需要我们自己安装并运行在自己的服务器上，当然也可以使用 gitlab.com 官方提供的免费的 Shared Runner 服务。</p><h3 id="GitLab-CI-的工作方式"><a href="#GitLab-CI-的工作方式" class="headerlink" title="GitLab CI 的工作方式"></a>GitLab CI 的工作方式</h3><ul><li>Pipeline 的触发</li></ul><p>当开发者 Push 代码到某个分支时，如果我们定义了 Pipeline，也就是代码根目录中有 <code>.gitlab-ci.yml</code> 文件，GitLab 会自动触发 Pipeline 的执行。</p><ul><li>Pipeline 的执行</li></ul><p>Pipeline 执行时，首先会 pull 下来被触发分支的代码，然后执行你在 pipline 中定义的 Job，Job 是你指定的一些 shell scripts，它就是你构建项目的逻辑。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>简单介绍一下 GitLab CI 的几个重要概念，接下来会通过实例来详细讲解 GitLab CI 的使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇基本介绍只介绍 GitLab CI，不会写具体的使用细节，旨在让新接触 GitLab CI 的同学先对它有个基本的认识，直接看官网文档可能需要多花点时间才能理清一些概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;GitLab CI 的设计很灵活，有多种使用方案，我在接下来会针对最常用的几种情况写一系列包括实现细节步骤的文章。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="GitLab CI/CD" scheme="http://maslow.github.io/categories/GitLab-CI-CD/"/>
    
    
      <category term="gitlab" scheme="http://maslow.github.io/tags/gitlab/"/>
    
      <category term="gitlab-ci" scheme="http://maslow.github.io/tags/gitlab-ci/"/>
    
      <category term="CI/CD" scheme="http://maslow.github.io/tags/CI-CD/"/>
    
      <category term="DevOps" scheme="http://maslow.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Engine V8 Embedding - Hello World 讲解</title>
    <link href="http://maslow.github.io/v8/v8-embedding-hello-world/"/>
    <id>http://maslow.github.io/v8/v8-embedding-hello-world/</id>
    <published>2018-03-26T15:47:14.000Z</published>
    <updated>2018-11-27T04:26:03.018Z</updated>
    
    <content type="html"><![CDATA[<p>通过一个 Hello World 示例来介绍 V8 的几个重要概念。</p><p>这个示例代码是基于 V8 (7.1) 的，要编译这个示例请查看 <a href="/v8/compile-v8/" title="Javascript Engine V8 Embedding - 编译">Javascript Engine V8 Embedding - 编译</a></p><a id="more"></a><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/libplatform/libplatform.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/v8.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化 V8</span></span><br><span class="line">  v8::V8::InitializeICUDefaultLocation(argv[<span class="number">0</span>]);</span><br><span class="line">  v8::V8::InitializeExternalStartupData(argv[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;v8::Platform&gt; platform = v8::platform::NewDefaultPlatform();</span><br><span class="line">  v8::V8::InitializePlatform(platform.get());</span><br><span class="line">  v8::V8::Initialize();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个 Isolate 实例, 它代表一个 JS VM 实例</span></span><br><span class="line">  v8::Isolate::CreateParams create_params;</span><br><span class="line">  create_params.array_buffer_allocator =</span><br><span class="line">      v8::ArrayBuffer::Allocator::NewDefaultAllocator();</span><br><span class="line"></span><br><span class="line">  v8::Isolate* isolate = v8::Isolate::New(create_params);</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 使用 isolate</span></span><br><span class="line">    v8::Isolate::<span class="function">Scope <span class="title">isolate_scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个 HandleScope，用于管理 Handle 的生命周期 </span></span><br><span class="line">    v8::<span class="function">HandleScope <span class="title">handle_scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Context，它是 javascript 代码执行的环境上下文对象</span></span><br><span class="line">    v8::Local&lt;v8::Context&gt; context = v8::Context::New(isolate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入 or 使用 context</span></span><br><span class="line">    v8::Context::<span class="function">Scope <span class="title">context_scope</span><span class="params">(context)</span></span>;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 定义 JS 代码字符串</span></span><br><span class="line">      v8::Local&lt;v8::String&gt; source =</span><br><span class="line">          v8::String::NewFromUtf8(isolate, <span class="string">"'Hello' + ', World!'"</span>,</span><br><span class="line">                                  v8::NewStringType::kNormal).ToLocalChecked();</span><br><span class="line">      <span class="comment">// 编译 JS 代码</span></span><br><span class="line">      v8::Local&lt;v8::Script&gt; script =</span><br><span class="line">          v8::Script::Compile(context, source).ToLocalChecked();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 运行 JS 代码，并获取结果</span></span><br><span class="line">      v8::Local&lt;v8::Value&gt; result = script-&gt;Run(context).ToLocalChecked();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将运行结果转换为 UTF8 字符串，并打印</span></span><br><span class="line">      v8::String::<span class="function">Utf8Value <span class="title">utf8</span><span class="params">(isolate, result)</span></span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, *utf8);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 释放 V8 相关资源</span></span><br><span class="line">  isolate-&gt;Dispose();</span><br><span class="line">  v8::V8::Dispose();</span><br><span class="line">  v8::V8::ShutdownPlatform();</span><br><span class="line">  <span class="keyword">delete</span> create_params.array_buffer_allocator;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="V8-重要概念"><a href="#V8-重要概念" class="headerlink" title="V8 重要概念"></a>V8 重要概念</h3><h4 id="Isolate"><a href="#Isolate" class="headerlink" title="Isolate"></a>Isolate</h4><p>一个 Isolate 就是一个 VM 实例，它有自己独立的 Heap。</p><h4 id="Handle"><a href="#Handle" class="headerlink" title="Handle"></a>Handle</h4><p>一个 <code>Handle</code> 就是对一个 V8 object 的引用， V8 objects 都是分配在 Heap 中的，所有 V8 objects 都需要通过一个<code>Handle</code> 引用来访问，才能保证 V8 garbage collector 能工作。</p><p><code>Handle</code> 又分 <code>Local</code>（局部） 和 <code>Persistent</code>（全局）两种。 </p><p><code>Local Handle</code> 的生命周期 使用 <code>HandleScope</code> 来管理，而 <code>Persistent</code> 是全局的 <code>Handle</code>， 需要通过 <code>Persistent::New()</code> 和 <code>Persistent::Release()</code> 来创建和释放。 </p><h4 id="Handle-Scope"><a href="#Handle-Scope" class="headerlink" title="Handle Scope"></a>Handle Scope</h4><p>一个 <code>Handle Scope</code> 可以理解为用来批量管理 <code>Handle</code> 的容器，这样我们就不用一个个的去释放 <code>Handle</code>，只要把它们的 <code>Handle Scope</code> 释放掉就可以了。</p><p><code>Handle Scope</code> 相当于提供了 <code>Handle Stack</code> 机制来管理 Handles，当一个 <code>Handle Scope</code> 本身被释放的时候，会从 <code>Handle Stack</code> 上弹出所有基于它的 <code>Local Handles</code>。</p><p>注意：这个 <code>Handle Stack</code> 并不是 <code>C++ 调用栈</code>， <code>Handle Scope</code> 是在 <code>C++ 调用栈</code> 中的分配的，<code>Handle Scope</code> 必须创建在栈上，不能用 <code>new</code> 创建！</p><img src="https://v8.dev/_img/docs/embed/local-persist-handles-review.png"><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p><code>Context</code> 是 javascript 代码的执行环境；</p><p>想像一下，你有多个不相关的 js 代码要运行，这些代码运行的过程中可能会修改 V8 全局的一些状态，就需要给他们指定不同的 <code>context</code> 才能相互独立的隔离运行。</p><p>另外，我们可以为一个 <code>context</code> 设置预定义的全局属性，这个属性可以是 C++ 写的对象或方法，这样在 js 环境中，就能够调用 C++ 对象了，相当于扩充了 js 的能力。</p><p>比如，<code>Node.js</code> 中的 <code>process</code> 对象，就是一个预定义到 <code>context</code> 的对象，所以在 <code>Node.js</code> 中可以直接使用。同样的，浏览器中的 <code>window</code> <code>document</code> 等全局对象，也是预定义到 <code>context</code> 上的。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>Getting started with embedding V8: <a href="https://v8.dev/docs/embed#advanced-guide" target="_blank" rel="noopener">https://v8.dev/docs/embed#advanced-guide</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过一个 Hello World 示例来介绍 V8 的几个重要概念。&lt;/p&gt;
&lt;p&gt;这个示例代码是基于 V8 (7.1) 的，要编译这个示例请查看 &lt;a href=&quot;/v8/compile-v8/&quot; title=&quot;Javascript Engine V8 Embedding - 编译&quot;&gt;Javascript Engine V8 Embedding - 编译&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript Engine V8" scheme="http://maslow.github.io/categories/Javascript-Engine-V8/"/>
    
    
      <category term="javascript" scheme="http://maslow.github.io/tags/javascript/"/>
    
      <category term="V8" scheme="http://maslow.github.io/tags/V8/"/>
    
      <category term="Node.js" scheme="http://maslow.github.io/tags/Node-js/"/>
    
      <category term="C/C++" scheme="http://maslow.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Engine V8 Embedding - 编译</title>
    <link href="http://maslow.github.io/v8/compile-v8/"/>
    <id>http://maslow.github.io/v8/compile-v8/</id>
    <published>2018-03-25T15:47:14.000Z</published>
    <updated>2018-11-27T02:47:20.705Z</updated>
    
    <content type="html"><![CDATA[<p>直接 git pull V8 的代码是不行的，需要使用 Google 提供的 depot_tools 工具包来获对代码并配置。</p><p>需要翻墙，下载和编译的耗时都很长，分别视你的网络情况和机器配置而定。</p><p>为了屏蔽掉不同系统的差异，直接使用 Docker 容器环境来编译。</p><a id="more"></a><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu bash  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要的工具</span></span><br><span class="line">apt update</span><br><span class="line">apt install -y git curl python xz-utils lbzip2 lsb-release lsb-core sudo vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Google 开发工具包</span></span><br><span class="line"><span class="comment"># see more: https://v8.dev/docs/source-code#using-git</span></span><br><span class="line"><span class="built_in">cd</span> /root &amp;&amp; git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/root/depot_tools</span><br><span class="line"></span><br><span class="line">gclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 v8 代码</span></span><br><span class="line">fetch v8</span><br><span class="line"><span class="built_in">cd</span> v8</span><br><span class="line"></span><br><span class="line">git checkout refs/tags/7.1.11 -b sample -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步依赖</span></span><br><span class="line">gclient sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个构建配置</span></span><br><span class="line">tools/dev/v8gen.py x64.release.sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始构建 v8 静态库</span></span><br><span class="line"><span class="comment"># 构建耗时较长，视你的机器配置而定</span></span><br><span class="line">ninja -C out.gn/x64.release.sample v8_monolith</span><br></pre></td></tr></table></figure><h3 id="使用静态库"><a href="#使用静态库" class="headerlink" title="使用静态库"></a>使用静态库</h3><p>等上面 v8 编译完成后，就可以使用编译好的静态库了，我们编译一下 v8 提供的 hello-world 示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译</span></span><br><span class="line">g++ -I. -Iinclude samples/hello-world.cc -o hello_world -lv8_monolith -Lout.gn/x64.release.sample/obj/ -pthread -std=c++0x</span><br><span class="line"> </span><br><span class="line"><span class="comment"># icu 数据文件，运行时需要</span></span><br><span class="line">cp out.gn/x64.release.sample/icudtl.dat .</span><br><span class="line"></span><br><span class="line">./hello_world</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://v8.dev/docs/embed" target="_blank" rel="noopener">https://v8.dev/docs/embed</a></p><p><a href="https://v8.dev/docs/source-code#using-git" target="_blank" rel="noopener">https://v8.dev/docs/source-code#using-git</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直接 git pull V8 的代码是不行的，需要使用 Google 提供的 depot_tools 工具包来获对代码并配置。&lt;/p&gt;
&lt;p&gt;需要翻墙，下载和编译的耗时都很长，分别视你的网络情况和机器配置而定。&lt;/p&gt;
&lt;p&gt;为了屏蔽掉不同系统的差异，直接使用 Docker 容器环境来编译。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript Engine V8" scheme="http://maslow.github.io/categories/Javascript-Engine-V8/"/>
    
    
      <category term="javascript" scheme="http://maslow.github.io/tags/javascript/"/>
    
      <category term="V8" scheme="http://maslow.github.io/tags/V8/"/>
    
      <category term="Node.js" scheme="http://maslow.github.io/tags/Node-js/"/>
    
      <category term="C/C++" scheme="http://maslow.github.io/tags/C-C/"/>
    
  </entry>
  
</feed>
