<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老根&#39;s Blog</title>
  
  <subtitle>技术分享与编程感悟</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://maslow.github.io/"/>
  <updated>2018-11-23T17:42:42.550Z</updated>
  <id>http://maslow.github.io/</id>
  
  <author>
    <name>Maslow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitLab CI 示例：构建 &amp; 测试 Node.js 应用</title>
    <link href="http://maslow.github.io/2018/11/24/gitlab-ci/example-node-js/"/>
    <id>http://maslow.github.io/2018/11/24/gitlab-ci/example-node-js/</id>
    <published>2018-11-23T16:18:13.000Z</published>
    <updated>2018-11-23T17:42:42.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="示例定义"><a href="#示例定义" class="headerlink" title="示例定义"></a>示例定义</h2><p>下面是一个简单的 Node.js 应用的 pipeline 定义：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_job:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:10</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">version</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test_job:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:10</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br></pre></td></tr></table></figure></p><h2 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h2><p>逐一介绍一下这几个字段：</p><h3 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>stage 定义了 pipeline 的执行步骤，也就是说 stages 是有序执行的。每个 stages 可包括多个 Job，Job 才是 CI Runner 要执行的任务。</p><p>上面的 pipeline 包括 build 和 test 两个步骤，先执行完所有 build 阶段的 Job，才会执行 test 阶段的 Job。</p><p>如果 build 阶段的 Job 执行失败了，则整个 pipeline 失败并中断执行，不会继续执行 test stage 了。</p><p>下面就来介绍什么是 Job.</p><h3 id="build-job"><a href="#build-job" class="headerlink" title="build_job"></a>build_job</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build_job:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:10</span> </span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">version</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><p><code>build_job</code> 是 Job 的名称，可以自由定义；</p><p><code>stage</code> 字段指定该 Job 属于 <code>build</code> 阶段的；</p><p><code>script</code> 就是自定义的构建脚本了，这里就是简单的 <code>npm install</code>；</p><p><code>image</code> 这个是指定 <code>script</code> 脚本的执行环境，它的值应该是一个 Docker 镜像。</p><p>Runner 开始执行这个 Job 时，首先会 pull 项目的最新代码，然后基于这个镜像启动一个容器并把代码挂载到容器里，最后在这个容器里面执行 <code>script</code> 定义的脚本。因为我们这里使用的是 node:10 作为作业的镜像，所以在 <code>script</code> 里才可以直接用 npm。</p><h3 id="test-job"><a href="#test-job" class="headerlink" title="test_job"></a>test_job</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test_job:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">node:10</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p><code>test_job</code> 同样是一个 Job，它属于 <code>test stage</code>，在上面的 <code>stages</code> 定义中 <code>test</code> 是在 <code>build</code> 之后的，所以它会等所有 <code>build</code> 阶段的 Job 执行完之后才会被执行。</p><blockquote><p>重点来了：每个 Job 是独立执行的，互相隔离的。 Runner 在执行 <code>test_job</code> 的时候，会重新 pull 应用的最新代码，然后启动一个新容器并挂载代码，再在里面执行 script 脚本。 </p></blockquote><p>这就会导致一个问题： 在 <code>test_job</code> 中我们并没有执行 <code>npm install</code> 就直接执行了 <code>npm run test</code>，理论上会是报错的！</p><p>这就要介绍最后一个未介绍的字段 <code>cache</code>.</p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules/</span></span><br></pre></td></tr></table></figure><p><code>cache</code> 是 pipeline 中定义 Job 之间的缓存的；</p><p>我们这里定义的 <code>cache</code> 是全局的，即作用于所有 Job 的；</p><p><code>paths</code> 定义需要缓存的目录，若需要，你可以指定多个；</p><p>缓存的逻辑是这样的：</p><pre><code>- 执行 build_job 时会检查之前无有缓存- 如果有缓存就下载到 `paths` 指定的缓存目录，无则忽略- build_job 执行结束之前，会重新把缓存目录缓存起来- test_job 执行之前，同样检查有无缓存，有则下载</code></pre><p>所以，test_job 的 script 中没有执行 <code>npm install</code> 是因为我们将 <code>node_modules</code> 目录缓存了。 </p><p>缓存是提高 Job 执行效率的策略，不仅仅是多个 Job 之间； </p><p>同一个 Job 在多次 pipeline 中也会共用缓存，意思是：</p><pre><code>- build_job 第一次运行时并没有缓存- 下次 pipeline 执行时，npm install 就会基于缓存的 node_modules 更新，而不是全量下载了</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这个示例，基本就了解 GitLab CI 的工作过程和定义方式了；</p><p>其中缓存策略是非常常用的，这里使用的是全局缓存，还可以指定某个 Job 特有有缓存策略。</p><p>想进一步了解缓存，请查看官方文档关于缓存的详细说明:<br><a href="https://docs.gitlab.com/ee/ci/yaml/README.html#cache" target="_blank" rel="noopener">https://docs.gitlab.com/ee/ci/yaml/README.html#cache</a></p><p>这个简单的示例，只是展示了 Node.js 应用的构建和测试，一个更完整的 CI 流程通常还会包括 <code>部署(deploy)</code>，接下来会继续通过示例讲解使用 GitLab CI 的更多使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;示例定义&quot;&gt;&lt;a href=&quot;#示例定义&quot; class=&quot;headerlink&quot; title=&quot;示例定义&quot;&gt;&lt;/a&gt;示例定义&lt;/h2&gt;&lt;p&gt;下面是一个简单的 Node.js 应用的 pipeline 定义：&lt;br&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="GitLab CI/CD" scheme="http://maslow.github.io/categories/GitLab-CI-CD/"/>
    
      <category term="GitLab CI Examples" scheme="http://maslow.github.io/categories/GitLab-CI-CD/GitLab-CI-Examples/"/>
    
    
      <category term="gitlab" scheme="http://maslow.github.io/tags/gitlab/"/>
    
      <category term="gitlab-ci" scheme="http://maslow.github.io/tags/gitlab-ci/"/>
    
      <category term="CI/CD" scheme="http://maslow.github.io/tags/CI-CD/"/>
    
      <category term="DevOps" scheme="http://maslow.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>GitLab CI 基本介绍</title>
    <link href="http://maslow.github.io/2018/11/09/gitlab-ci/index/"/>
    <id>http://maslow.github.io/2018/11/09/gitlab-ci/index/</id>
    <published>2018-11-08T16:03:53.000Z</published>
    <updated>2018-11-23T17:42:31.602Z</updated>
    
    <content type="html"><![CDATA[<img src="https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png"><blockquote><p>这篇基本介绍只介绍 GitLab CI，不会写具体的使用细节，旨在让新接触 GitLab CI 的同学先对它有个基本的认识，直接看官网文档可能需要多花点时间才能理清一些概念。</p></blockquote><blockquote><p>GitLab CI 的设计很灵活，有多种使用方案，我在接下来会针对最常用的几种情况写一系列包括实现细节步骤的文章。</p></blockquote><h3 id="前置需求"><a href="#前置需求" class="headerlink" title="前置需求"></a>前置需求</h3><p>当前有 3 台服务器 develop, staging, production 分别对应代码仓库上的三个分支：develop, staging, master。</p><p>要求 push 代码到仓库时会触发 CI 的执行：</p><pre><code>1. build app2. testing app3. deploy to server</code></pre><p>代码 push 到哪个分支，就把项目部署到相应的服务器上。</p><h3 id="GitLab-CI-的重要概念"><a href="#GitLab-CI-的重要概念" class="headerlink" title="GitLab CI 的重要概念"></a>GitLab CI 的重要概念</h3><p>要理解 GitLab CI 的工作方式，必须要理解两个概念：</p><pre><code>- Pipeline- Runner</code></pre><p>上面说的 CI 执行过程就是 <code>pipeline</code>，它定义了项目的构建、测试、部署等的执行过程。</p><p>我们需要在每个项目上定义一个 <code>pipeline</code>。</p><p>定义一个 <code>pipeline</code> 就是在项目代码根目录创建文件：<code>.gitlab-ci.yml</code>.</p><p>定义好 <code>pipeline</code> 后，GitLab CI 会读取并执行这个 <code>pipeline</code>，执行的程序叫做 <code>Runner</code>。</p><p><code>Runner</code> 是负责执行 <code>pipeline</code> 的程序。</p><p>通常 <code>Runner</code> 需要我们自己安装并运行在自己的服务器上，当然也可以使用 gitlab.com 官方提供的免费的 Shared Runner 服务。</p><h3 id="GitLab-CI-的工作方式"><a href="#GitLab-CI-的工作方式" class="headerlink" title="GitLab CI 的工作方式"></a>GitLab CI 的工作方式</h3><ul><li><p>Pipeline 的触发<br>当开发者 Push 代码到某个分支时，如果我们定义了 Pipeline，也就是代码根目录中有 <code>.gitlab-ci.yml</code> 文件，GitLab 会自动触发 Pipeline 的执行。</p></li><li><p>Pipeline 的执行<br>Pipeline 执行时，首先会 pull 下来被触发分支的代码，然后执行你在 pipline 中定义的 Job，Job 是你指定的一些 shell scripts，它就是你构建项目的逻辑。</p></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>简单介绍一下 GitLab CI 的几个重要概念，接下来会通过实例来详细讲解 GitLab CI 的使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇基本介绍只介绍 GitLab CI，不会写具体的使用细节，旨在让新接触 GitLab CI 的同
      
    
    </summary>
    
      <category term="GitLab CI/CD" scheme="http://maslow.github.io/categories/GitLab-CI-CD/"/>
    
      <category term="GitLab CI 基本介绍" scheme="http://maslow.github.io/categories/GitLab-CI-CD/GitLab-CI-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="gitlab" scheme="http://maslow.github.io/tags/gitlab/"/>
    
      <category term="gitlab-ci" scheme="http://maslow.github.io/tags/gitlab-ci/"/>
    
      <category term="CI/CD" scheme="http://maslow.github.io/tags/CI-CD/"/>
    
      <category term="DevOps" scheme="http://maslow.github.io/tags/DevOps/"/>
    
  </entry>
  
</feed>
